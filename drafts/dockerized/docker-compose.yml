services:
  # PostgreSQL Database Service
  db:
    image: postgres:16
    env_file:
      - ${CONF}/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./${CONF}/database/postgresql_init.sql:/docker-entrypoint-initdb.d/postgresql_init.sql
      - ./${CONF}/database/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./${CONF}/database/pg_hba.conf:/etc/postgresql/pg_hba.conf
    expose:
      - 5432
    networks:
      - backend

  # Django Service
  web:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ${CONF}/web/Dockerfile
    entrypoint: ${APP_CONF}/web/server-entrypoint.sh
    volumes:
      - .:${APP_HOME}
      - static_volume:${APP_STATIC}
      - log_volume:${APP_LOGS}
    expose:
      - 8000
    env_file:
      - ${CONF}/.env
    depends_on:
      - db
      - redis
    networks:
      - backend

# Nginx services
  nginx:
    restart: always
    image: nginx:1.27-alpine3.20-slim
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./${NGINX_CONF}:/etc/nginx/conf.d/default.conf
      - ./${CERTS}:/etc/nginx/certs
      - static_volume:${APP_STATIC}
    depends_on:
      - web
    networks:
      - backend

  redis:
    image: redis:7.4-rc2-alpine3.20
    expose:
      - 6379
    networks:
      - backend

# Celery service
  celery:
    build:
      context:  .
      dockerfile: ${CONF}/web/Dockerfile
    entrypoint: ${APP_CONF}/web/celery-entrypoint.sh
    env_file:
      - ${CONF}/.env

    volumes:
      - static_volume:${APP_STATIC}
    depends_on:
      - web
      - redis
      - db
    networks:
      - backend

  celery-beat:
    build:
      context: .
      dockerfile: ${CONF}/web/Dockerfile
    entrypoint: ${APP_CONF}/web/celery-beat-entrypoint.sh
    env_file:
      - ${CONF}/.env
    depends_on:
      - redis
      - db
    networks:
      - backend

networks:
  backend:

volumes:
  static_volume: {}
  log_volume: {}
  postgres_data: {}
