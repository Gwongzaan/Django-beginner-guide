from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from webdriver_manager.core.driver_cache import DriverCacheManager
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys

import time
import unittest
from pathlib import Path

# installation path of the chrome driver
install_path = Path(__file__).resolve().parent.parent.parent
cache_manager = DriverCacheManager(install_path)
chrome_options = Options()
chrome_options.add_argument('--headless')

class NewVistorTest(unittest.TestCase):
    def setUp(self):
        self.browser = webdriver.Chrome(
            service=Service(ChromeDriverManager(cache_manager=cache_manager).install()),
            options=chrome_options
        )

    def tearDown(self):
        self.browser.quit()

    def check_for_row_in_list_table(self, row_text):
        table = self.browser.find_element(By.ID, 'id_list_table')
        rows = table.find_elements(By.TAG_NAME, 'tr')
        self.assertIn(row_text, [row.text for row in rows])
#        self.assertTrue(
#            any(row.text == '1: Buy books' for row in rows),
#            f'new to-do items did not appear in table, contents were: \n{table.txt}
#        )
#        # same as 
#        self.assertIn('1: Buy books', [row.text for row in rows])


    def test_can_start_a_list_and_retrieve_it_later(self):
        # user checkout the blog
        self.browser.get("http://localhost:8000/")
        # user see the page title
        self.assertIn("To-Do lists", self.browser.title)
        # user see a list of titles of blogs
        header_text = self.browser.find_element(By.TAG_NAME, 'h1').text.strip()
        self.assertIn('Your To-Do list', header_text)
        # user enter a to-do item 
        inputbox = self.browser.find_element(By.ID, 'id_new_item')
        self.assertEqual(inputbox.get_attribute('placeholder'), 'Enter a to-do item')
        # user types "Buy books" into a text box
        inputbox.send_keys('Buy books')
        inputbox.send_keys(Keys.ENTER)
        time.sleep(1)
        self.check_for_row_in_list_table('1: Buy books')
        
        # suer type another to-do
        inputbox = self.browser.find_element(By.ID, 'id_new_item')
        inputbox.send_keys('Read the book')
        inputbox.send_keys(Keys.ENTER)
        time.sleep(1)

        self.check_for_row_in_list_table('1: Buy books')
        self.check_for_row_in_list_table('2: Read the book')






        ####################
        ####################
        ####################
        ####################

        self.fail('Finish the test!')

        ####################
        ####################
        ####################
        ####################

        # user click a listed item

        # user see detail content of the blog: title, author, published date, content

        # user quit browsing


if __name__ == "__main__":
    unittest.main(warnings='ignore')
